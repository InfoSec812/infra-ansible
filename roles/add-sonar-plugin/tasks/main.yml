---

- name: Get JAR name
  set_fact:
    jar_name: "{{ plugin_url.split('/')[-1] }}"
    plugin_name: "{{ plugin_url.split('/')[-1] | regex_replace('-([0-9]+\\.?)+\\.jar', '') }}"

## The Jinja2 template and the Go template in the following task conflict,
## so the weird double-curly-braces surrounded by double-curly-braces is required.
- name: Find sonarqube pod
  command: >-
      oc get pods --namespace={{ namespace }} -l='app==sonarqube'
      -o jsonpath="{.items[0].metadata.name}"
  register: pod_name

- name: Extract pod name
  set_fact:
    pod_name: "{{ pod_name.stdout }}"

- name: Check for existing plugin install_location
  command: >-
    oc exec -i --namespace={{ namespace }} {{ pod_name }} -- find {{ install_location }}/ -type f -name '{{ plugin_name }}*jar'
  register: existing_plugin

- name: Download the SonarQube plugin
  get_url:
    url: "{{ plugin_url }}"
    dest: "/tmp/{{ jar_name }}"
    mode: 0440
  when: existing_plugin is not defined or not existing_plugin.stdout.endswith(jar_name)

- name: Delete any existing matching plugins
  command: >-
    oc exec --namespace={{ namespace }} {{ pod_name }} -- find {{ install_location }}/ -type f -name '{{ plugin_name }}*jar' -delete
  when: existing_plugin is defined and not existing_plugin.stdout.endswith(jar_name)

- name: Copy plugin to SonarQube pod
  command: "oc cp /tmp/{{ jar_name }} {{ namespace }}/{{ pod_name }}:{{ install_location }}/{{ jar_name }}"
  when: existing_plugin is not defined or not existing_plugin.stdout.endswith(jar_name)

- name: Redeploy SonarQube
  command: "oc rollout latest --namespace={{ namespace }} {{ pod_prefix }}"
  when: existing_plugin is not defined or not existing_plugin.stdout.endswith(jar_name)